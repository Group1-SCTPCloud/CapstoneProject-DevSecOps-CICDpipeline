name: Deploy AWS S3 static website Infrastructure

on:
  push:
    

env:
    #verbosity setting for Terraform logs
    TF_LOG: INFO
     # Credentials for deployment to AWS
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    # S3 bucket for the Terraform state
    BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}} 

jobs:
    terraform:
        name: "Terraform Infrastructure"
        runs-on: ubuntu-latest
        defaults:
            run:
              shell: bash
              # We keep Terraform files in the terraform directory.
              working-directory: ./Infra
        
        steps:
            - name: Checkout the repository to the runner
              uses: actions/checkout@v2
        
            - name: Setup Terraform with specified version on the runner
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.3.0
           
            - name: Terraform init
              id: init
              run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        
            - name: Terraform format
              id: fmt
              run: terraform fmt -check
           
            - name: Terraform validate
              id: validate
              run: terraform validate
        
            - name: Terraform plan
              id: plan
              if: github.event_name == 'pull_request'
              run: terraform plan -no-color -input=false
              continue-on-error: true
           
            - uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
              with:
                script: |
                  const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                  #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                  #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                  #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        
                  <details><summary>Show Plan</summary>
        
                  \`\`\`\n
                  ${process.env.PLAN}
                  \`\`\`
        
                  </details>
                  *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
        
                  github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                  })
        
            - name: Terraform Plan Status
              if: steps.plan.outcome == 'failure'
              run: exit 1
        
            - name: Terraform Apply
              if: github.ref == 'refs/heads/dev' && github.event_name == 'push' #change env check here
              run: terraform apply -auto-approve -input=false

    Upload_file:
        name: upload index.html
        runs-on: ubuntu-latest
        needs: terraform
        steps:
            - name: Install AWS CLI v2
              run: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install --update #update flag worked
    
            # Syncs the repo with the S3 bucket
            - name: Sync with S3 (to change bucket name, and make into variable)
              run: |
                aws s3 sync . s3://${{ env.bucket_name }} --delete --exclude "*" --include "index.html"
            
            # can use aws s3 sync <LocalPath> <S3Uri> or <S3Uri> <LocalPath> or <S3Uri> <S3Uri>
            # represents current repo 
